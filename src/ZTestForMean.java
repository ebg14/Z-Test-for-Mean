/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package statisticsproject;

import java.awt.BorderLayout;
import java.awt.Color;
import static java.lang.Math.abs;
import static java.lang.Math.sqrt;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.apache.commons.math3.distribution.NormalDistribution;

/**
 * @file ZTestForMean
 * @author Beyza Gürer beyza.gurer@fsm.edu.tr
 */
public class ZTestForMean extends javax.swing.JFrame {

    /**
     * Creates new form ZTestForMean
     */
    double mean, std, sample_mean, significance_level;
    int size_n = 0;
    String sign;
    double sample[] = new double[30];
    double zValue;
    double criticalValue;

    public ZTestForMean() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        hMeanTxt = new javax.swing.JTextField();
        nullCombobox = new javax.swing.JComboBox<>();
        altCombobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        stdTxt = new javax.swing.JTextField();
        sigLvlTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        sampleMeanTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        sampleSizeTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sampleTxt = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        jLabel10.setText("jLabel10");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusCycleRoot(false);

        hMeanTxt.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        hMeanTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hMeanTxtActionPerformed(evt);
            }
        });

        nullCombobox.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        nullCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "≠", "<", ">", "≤", "≥" }));
        nullCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nullComboboxActionPerformed(evt);
            }
        });

        altCombobox.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        altCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "≠", "=", "<", ">", "≤", "≥" }));
        altCombobox.setVerifyInputWhenFocusTarget(false);
        altCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altComboboxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("H₀ : μ");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("Hₐ : μ");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setText("μ₀");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel4.setText("μ₀");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel5.setText("Hypothesized Mean (μ₀):");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel6.setText("Population Std (σ):");

        stdTxt.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        stdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stdTxtActionPerformed(evt);
            }
        });

        sigLvlTxt.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        sigLvlTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sigLvlTxtActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel7.setText("Significance Level (α):");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel8.setText("Sample Mean (x̅): ");

        sampleMeanTxt.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        sampleMeanTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleMeanTxtActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel9.setText("Sample Size (n): ");

        sampleSizeTxt.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        sampleSizeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleSizeTxtActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel11.setText("Data Set");

        sampleTxt.setColumns(20);
        sampleTxt.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        sampleTxt.setRows(5);
        sampleTxt.setText("Writing the sample will \nautomatically\ncalculate sample \nmean and size.");
        sampleTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sampleTxtMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(sampleTxt);

        jButton1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel12.setText("Z-test for Mean");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(stdTxt)
                                        .addComponent(hMeanTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(sigLvlTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8))
                                .addGap(113, 113, 113)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sampleSizeTxt)
                                    .addComponent(sampleMeanTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jLabel11)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(40, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nullCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(altCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(242, 242, 242))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel12)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nullCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(altCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(hMeanTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(stdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(sigLvlTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(sampleMeanTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(sampleSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nullComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nullComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nullComboboxActionPerformed

    private void altComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_altComboboxActionPerformed

    private void hMeanTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hMeanTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hMeanTxtActionPerformed

    private void sigLvlTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sigLvlTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sigLvlTxtActionPerformed

    private void sampleMeanTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleMeanTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sampleMeanTxtActionPerformed

    private void sampleSizeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleSizeTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sampleSizeTxtActionPerformed

    private void stdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stdTxtActionPerformed

    private void createSample() {
        String no = "";
        int counter = 0;
        char sampleNumbers[];
        sampleTxt.setText(sampleTxt.getText() + String.valueOf('\n'));
        sampleNumbers = sampleTxt.getText().toCharArray();
        for (int i = 0; i < sampleNumbers.length;) {
            if (sampleNumbers[i] != '\n') {
                while (sampleNumbers[i] != '\n') {

                    no += String.valueOf(sampleNumbers[i]);
                    i++;
                }

                sample[counter] = Double.valueOf(no);
                counter++;

            } else {
                i++;
                no = "";
            }

        }
        size_n = counter;
        for (int i = 0; i < size_n; i++) {
            System.out.println(sample[i]);
        }
        sampleSizeTxt.setText(String.valueOf(size_n));

    }

    private void drawGraph(String type, double zValue, double test, String result) {

        Function2D normalDist = new NormalDistributionFunction2D(0, 1);
        XYDataset dataset = DatasetUtilities.sampleFunction2D(normalDist, -3.9, 3.9, 100, "Normal");
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Critival Value: " + String.format("%.3f", zValue) + "  Test Statistic: " + String.format("%.3f", test) + "\nResult: " + result,
                "z",
                "Φ(z)",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false);

        XYPlot plot = chart.getXYPlot();
        XYSeriesCollection dset = (XYSeriesCollection) dataset;

        XYSeries region = new XYSeries("Reject Region");
        XYSeries tStatistic = new XYSeries("Test Statistic");

        tStatistic.add(test, 0);
        tStatistic.add(test, dataset.getYValue(0, (int) (50 - (abs(test) * (50 / 4)))));

        region.add(-4, 0);
        region.add(4, 0);

        if (type.equals("rightTail")) {
            region.add(-1, 0.4);
            region.add(zValue, 0.4);
            region.add(zValue, 0);
        } else if (type.equals("leftTail")) {
            region.add(zValue, 0);
            region.add(zValue, 0.4);
            region.add(-1, 0.4);
        } else if (type.equals("twoSided")) {
            region.add(-zValue, 0);
            region.add(-zValue, 0.4);
            region.add(zValue, 0.4);
            region.add(zValue, 0);
        }

        dset.addSeries(region);
        dset.addSeries(tStatistic);

        Color none = new Color(0, 0, 0, 0);
        Color colour = new Color(255, 255, 255);

        XYDifferenceRenderer renderer = new XYDifferenceRenderer();
        renderer.setNegativePaint(none);
        renderer.setPositivePaint(colour);
        renderer.setSeriesPaint(1, none);
        renderer.setSeriesPaint(2, new Color(0, 0, 0));

        plot.setRenderer(renderer);

        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 300));

        JPanel jPanel4 = new JPanel();
        jPanel4.setLayout(new BorderLayout());
        jPanel4.add(chartPanel, BorderLayout.NORTH);

        JFrame frame = new JFrame();
        frame.add(jPanel4);
        frame.pack();
        frame.setVisible(true);

    }

    private void calculateSampleMean() {

        double sum = 0;
        for (int i = 0; i < size_n; i++) {
            sum += sample[i];
        }
        sample_mean = sum / size_n;
        sampleMeanTxt.setText(String.valueOf(sample_mean));
    }

    private void assignValues() {
        if (sampleMeanTxt.getText().equals("")) {
            createSample();
            calculateSampleMean();
            std = Double.valueOf(stdTxt.getText());
            significance_level = Double.valueOf(sigLvlTxt.getText());
            mean = Double.valueOf(hMeanTxt.getText());
            return;
        }

        sample_mean = Double.valueOf(sampleMeanTxt.getText());
        size_n = Integer.valueOf(sampleSizeTxt.getText());
        std = Double.valueOf(stdTxt.getText());
        significance_level = Double.valueOf(sigLvlTxt.getText());
        mean = Double.valueOf(hMeanTxt.getText());

    }

    private void calculateZvalue() {
        zValue = (sample_mean - mean) / (std / sqrt(size_n));
    }

    private void calculateCritical() {
        NormalDistribution nd = new NormalDistribution(0, 1);
        criticalValue = nd.inverseCumulativeProbability(significance_level);
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            assignValues();
            calculateZvalue();
            String type, result;
            sign = altCombobox.getSelectedItem().toString();
            if (sign.equals("≥") || sign.equals(">")) {
                calculateCritical();
                criticalValue *= -1;
                type = "rightTail";
                if (zValue >= criticalValue) {
                    result = "Reject H₀";
                } else {
                    result = "Accept H₀";
                }

            } else if (sign.equals("≤") || sign.equals("<")) {
                calculateCritical();
                type = "leftTail";
                if (zValue <= criticalValue) {
                    result = "Reject H₀";
                } else {
                    result = "Accept H₀";
                }

            } else {
                significance_level /= 2;
                calculateCritical();
                criticalValue *= -1;
                type = "twoSided";
                if (zValue <= -criticalValue || zValue >= criticalValue) {
                    result = "Reject H₀";
                } else {
                    result = "Accept H₀";
                }
            }
            drawGraph(type, criticalValue, zValue, result);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Make sure you filled all the blanks correctly.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void sampleTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sampleTxtMouseClicked
        // TODO add your handling code here:
        sampleTxt.setText("");
    }//GEN-LAST:event_sampleTxtMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZTestForMean.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZTestForMean.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZTestForMean.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZTestForMean.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ZTestForMean().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> altCombobox;
    private javax.swing.JTextField hMeanTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> nullCombobox;
    private javax.swing.JTextField sampleMeanTxt;
    private javax.swing.JTextField sampleSizeTxt;
    private javax.swing.JTextArea sampleTxt;
    private javax.swing.JTextField sigLvlTxt;
    private javax.swing.JTextField stdTxt;
    // End of variables declaration//GEN-END:variables
}
